import pygame
import pygame.font
import math
import random

class ComponentVisualizer:
    """
    Visualizes computer components to enhance educational experience
    """
    def __init__(self, width=640, height=480):
        self.width = width
        self.height = height
        self.surface = pygame.Surface((width, height))
        
        # Colors
        self.colors = {
            "cpu": (220, 100, 100),  # Red
            "memory": (100, 220, 100),  # Green
            "storage": (100, 100, 220),  # Blue
            "network": (220, 220, 100),  # Yellow
            "bus": (220, 100, 220),  # Purple
            "io": (100, 220, 220),  # Cyan
            "background": (30, 30, 50),  # Dark blue
            "text": (240, 240, 240),  # Light gray
            "highlight": (255, 255, 100)  # Bright yellow
        }
        
        # Animation variables
        self.animation_ticks = 0
        self.particles = []
        
        # Initialize font
        pygame.font.init()
        self.title_font = pygame.font.SysFont('Arial', 24, bold=True)
        self.text_font = pygame.font.SysFont('Arial', 18)
        self.small_font = pygame.font.SysFont('Arial', 14)
        
    def render_cpu(self, clock_speed=3.6, cores=4, cache=8):
        """Visualize CPU architecture"""
        self.surface.fill(self.colors["background"])
        
        # CPU dimensions
        cpu_width = 300
        cpu_height = 300
        cpu_x = (self.width - cpu_width) // 2
        cpu_y = (self.height - cpu_height) // 2
        
        # Draw CPU package
        pygame.draw.rect(self.surface, self.colors["cpu"], 
                        (cpu_x, cpu_y, cpu_width, cpu_height))
        pygame.draw.rect(self.surface, self.colors["text"], 
                        (cpu_x, cpu_y, cpu_width, cpu_height), 3)
        
        # Draw CPU cores
        core_width = cpu_width // 3
        core_height = cpu_height // 3
        
        for i in range(cores):
            row = i // 2
            col = i % 2
            core_x = cpu_x + core_width * col + core_width//2
            core_y = cpu_y + core_height * row + core_height//2
            
            # Core body
            pygame.draw.rect(self.surface, (240, 240, 240), 
                            (core_x - core_width//3, core_y - core_height//3, 
                             core_width//1.5, core_height//1.5))
            
            # Core details
            pygame.draw.line(self.surface, (50, 50, 50), 
                            (core_x - core_width//4, core_y), 
                            (core_x + core_width//4, core_y), 2)
            pygame.draw.line(self.surface, (50, 50, 50), 
                            (core_x, core_y - core_height//4), 
                            (core_x, core_y + core_height//4), 2)
            
            # Core label
            core_label = self.small_font.render(f"Core {i+1}", True, (0, 0, 0))
            self.surface.blit(core_label, 
                             (core_x - core_label.get_width()//2, 
                              core_y + core_height//4 + 5))
        
        # Draw cache
        cache_height = cpu_height // 6
        cache_y = cpu_y + cpu_height - cache_height - 10
        
        pygame.draw.rect(self.surface, (150, 200, 255), 
                        (cpu_x + 20, cache_y, cpu_width - 40, cache_height))
        cache_label = self.small_font.render(f"L3 Cache ({cache}MB)", True, (0, 0, 0))
        self.surface.blit(cache_label, 
                         (cpu_x + cpu_width//2 - cache_label.get_width()//2, 
                          cache_y + cache_height//2 - cache_label.get_height()//2))
        
        # Draw CPU pins
        for i in range(20):
            pin_x = cpu_x + (i * 15) + 10
            pygame.draw.line(self.surface, (200, 200, 200), 
                            (pin_x, cpu_y + cpu_height), 
                            (pin_x, cpu_y + cpu_height + 15), 2)
        
        # Draw title and specs
        title = self.title_font.render("CPU Architecture", True, self.colors["text"])
        self.surface.blit(title, (self.width//2 - title.get_width()//2, 20))
        
        specs = self.text_font.render(f"Clock Speed: {clock_speed}GHz | Cores: {cores} | Cache: {cache}MB", 
                                     True, self.colors["text"])
        self.surface.blit(specs, (self.width//2 - specs.get_width()//2, 50))
        
        # Draw clock cycle animation
        self.animation_ticks += 1
        cycle_x = 100
        cycle_y = 100
        cycle_radius = 30
        
        if cores >= 1:
            angle = (self.animation_ticks % 60) * 6  # 6 degrees per tick
            end_x = cycle_x + int(math.cos(math.radians(angle)) * cycle_radius)
            end_y = cycle_y + int(math.sin(math.radians(angle)) * cycle_radius)
            
            pygame.draw.circle(self.surface, (50, 50, 50), (cycle_x, cycle_y), cycle_radius, 1)
            pygame.draw.line(self.surface, self.colors["highlight"], 
                            (cycle_x, cycle_y), (end_x, end_y), 2)
            
            clock_label = self.small_font.render("Clock", True, self.colors["text"])
            self.surface.blit(clock_label, (cycle_x - clock_label.get_width()//2, 
                                           cycle_y - cycle_radius - 20))
        
        # Educational text
        info_text = [
            "CPU (Central Processing Unit):",
            "- Executes instructions to process data",
            "- Contains multiple cores for parallel processing",
            "- Uses cache memory for faster data access",
            "- Clock speed determines how many cycles per second",
            "- Connected to system via socket on motherboard"
        ]
        
        for i, line in enumerate(info_text):
            text = self.small_font.render(line, True, self.colors["text"])
            self.surface.blit(text, (20, self.height - 150 + i*20))
        
        return self.surface
    
    def render_memory_hierarchy(self):
        """Visualize memory hierarchy with animation"""
        self.surface.fill(self.colors["background"])
        
        # Title
        title = self.title_font.render("Memory Hierarchy", True, self.colors["text"])
        self.surface.blit(title, (self.width//2 - title.get_width()//2, 20))
        
        # Setup memory diagram
        levels = [
            {"name": "CPU Registers", "size": "KB", "speed": "0.5ns", "width": 60, "color": (220, 100, 100)},
            {"name": "L1 Cache", "size": "64KB", "speed": "1ns", "width": 100, "color": (220, 150, 100)},
            {"name": "L2 Cache", "size": "256KB", "speed": "3ns", "width": 150, "color": (220, 180, 100)},
            {"name": "L3 Cache", "size": "8MB", "speed": "10ns", "width": 200, "color": (190, 190, 100)},
            {"name": "RAM", "size": "16GB", "speed": "100ns", "width": 280, "color": (100, 200, 100)},
            {"name": "SSD", "size": "1TB", "speed": "10Î¼s", "width": 340, "color": (100, 180, 180)},
            {"name": "HDD", "size": "4TB", "speed": "10ms", "width": 380, "color": (100, 100, 200)}
        ]
        
        # Calculate total height
        total_height = len(levels) * 50 + (len(levels) - 1) * 20
        start_y = (self.height - total_height) // 2
        
        # Draw the memory levels
        for i, level in enumerate(levels):
            level_height = 50
            level_y = start_y + i * (level_height + 20)
            level_x = (self.width - level["width"]) // 2
            
            # Draw level box
            pygame.draw.rect(self.surface, level["color"], 
                            (level_x, level_y, level["width"], level_height))
            pygame.draw.rect(self.surface, self.colors["text"], 
                            (level_x, level_y, level["width"], level_height), 2)
            
            # Level name
            name_text = self.small_font.render(level["name"], True, (0, 0, 0) if sum(level["color"]) > 380 else (255, 255, 255))
            self.surface.blit(name_text, 
                             (level_x + level["width"]//2 - name_text.get_width()//2, 
                              level_y + 10))
            
            # Size and speed
            details_text = self.small_font.render(f"{level['size']} | {level['speed']}", True, (0, 0, 0) if sum(level["color"]) > 380 else (255, 255, 255))
            self.surface.blit(details_text, 
                             (level_x + level["width"]//2 - details_text.get_width()//2, 
                              level_y + 30))
        
        # Draw connecting lines
        for i in range(len(levels) - 1):
            top_level = levels[i]
            bottom_level = levels[i+1]
            
            top_y = start_y + i * (50 + 20) + 50
            bottom_y = top_y + 20
            
            top_width = top_level["width"]
            bottom_width = bottom_level["width"]
            
            top_center_x = (self.width - top_width) // 2 + top_width // 2
            bottom_center_x = (self.width - bottom_width) // 2 + bottom_width // 2
            
            pygame.draw.line(self.surface, self.colors["text"], 
                            (top_center_x, top_y), 
                            (bottom_center_x, bottom_y), 2)
        
        # Add data access animation
        self.animation_ticks += 1
        
        # Create new particles occasionally
        if self.animation_ticks % 30 == 0:
            # Data request going down the hierarchy
            self.particles.append({
                "x": self.width // 2,
                "y": start_y - 20,
                "type": "request",
                "lifetime": 100,
                "direction": "down",
                "target_level": random.randint(1, len(levels) - 1),
                "current_level": -1
            })
        
        # Update and draw particles
        for particle in self.particles[:]:
            if particle["lifetime"] <= 0:
                self.particles.remove(particle)
                continue
                
            particle["lifetime"] -= 1
            
            # Determine target y-position based on direction and target level
            if particle["direction"] == "down":
                if particle["current_level"] < particle["target_level"]:
                    # Moving to next level
                    next_level = particle["current_level"] + 1
                    target_y = start_y + next_level * (50 + 20) + 25  # Center of the level
                    
                    # Move toward target
                    if particle["y"] < target_y:
                        particle["y"] += 2
                    else:
                        particle["current_level"] = next_level
                        # If reached target, start moving back up
                        if particle["current_level"] == particle["target_level"]:
                            particle["direction"] = "up"
                            # Create a "data found" particle
                            self.particles.append({
                                "x": particle["x"],
                                "y": particle["y"],
                                "type": "data",
                                "lifetime": 100,
                                "direction": "up",
                                "target_level": 0,
                                "current_level": particle["current_level"]
                            })
            else:  # direction == "up"
                if particle["current_level"] > particle["target_level"]:
                    # Moving to previous level
                    next_level = particle["current_level"] - 1
                    target_y = start_y + next_level * (50 + 20) + 25  # Center of the level
                    
                    # Move toward target
                    if particle["y"] > target_y:
                        particle["y"] -= 3  # Move up faster
                    else:
                        particle["current_level"] = next_level
            
            # Draw the particle
            if particle["type"] == "request":
                color = (255, 200, 100)  # Orange for requests
                radius = 4
            else:  # type == "data"
                color = (100, 255, 200)  # Cyan for data
                radius = 6
                
            pygame.draw.circle(self.surface, color, (particle["x"], int(particle["y"])), radius)
        
        # Educational text
        info_text = [
            "Memory Hierarchy:",
            "- Balances speed, size, and cost",
            "- Faster memory is smaller and more expensive",
            "- CPU checks each level in order when requesting data",
            "- Takes advantage of locality of reference",
            "- Hit: Data found at current level",
            "- Miss: Must check next level down"
        ]
        
        # Draw text box for info
        text_box_x = 20
        text_box_y = self.height - 160
        text_box_width = 300
        text_box_height = 150
        
        pygame.draw.rect(self.surface, (50, 50, 70), 
                        (text_box_x, text_box_y, text_box_width, text_box_height))
        pygame.draw.rect(self.surface, self.colors["text"], 
                        (text_box_x, text_box_y, text_box_width, text_box_height), 2)
        
        for i, line in enumerate(info_text):
            text = self.small_font.render(line, True, self.colors["text"])
            self.surface.blit(text, (text_box_x + 10, text_box_y + 10 + i*20))
        
        return self.surface
    
    def render_network_stack(self):
        """Visualize the network protocol stack"""
        self.surface.fill(self.colors["background"])
        
        # Title
        title = self.title_font.render("Network Protocol Stack", True, self.colors["text"])
        self.surface.blit(title, (self.width//2 - title.get_width()//2, 20))
        
        # Setup stack layers
        layers = [
            {"name": "Application", "protocols": "HTTP, FTP, SMTP, DNS", "color": (220, 120, 120)},
            {"name": "Transport", "protocols": "TCP, UDP", "color": (220, 180, 120)},
            {"name": "Internet", "protocols": "IP, ICMP, ARP", "color": (180, 220, 120)},
            {"name": "Link", "protocols": "Ethernet, WiFi, PPP", "color": (120, 180, 220)},
            {"name": "Physical", "protocols": "Cables, Radio, Fiber", "color": (180, 120, 220)}
        ]
        
        # Calculate dimensions
        layer_width = 300
        layer_height = 60
        stack_height = len(layers) * layer_height
        start_y = (self.height - stack_height) // 2
        start_x = (self.width - layer_width) // 2
        
        # Draw the stack
        for i, layer in enumerate(layers):
            layer_y = start_y + i * layer_height
            
            # Draw layer
            pygame.draw.rect(self.surface, layer["color"], 
                            (start_x, layer_y, layer_width, layer_height))
            pygame.draw.rect(self.surface, self.colors["text"], 
                            (start_x, layer_y, layer_width, layer_height), 2)
            
            # Layer name
            name_text = self.text_font.render(layer["name"], True, (0, 0, 0))
            self.surface.blit(name_text, 
                             (start_x + layer_width//2 - name_text.get_width()//2, 
                              layer_y + 10))
            
            # Layer protocols
            proto_text = self.small_font.render(layer["protocols"], True, (0, 0, 0))
            self.surface.blit(proto_text, 
                             (start_x + layer_width//2 - proto_text.get_width()//2, 
                              layer_y + 35))
        
        # Animate data packet traversing the stack
        self.animation_ticks += 1
        
        # Create new data packets
        if self.animation_ticks % 60 == 0:
            direction = random.choice(["down", "up"])
            # Sending data
            if direction == "down":
                # Start at application layer (transmitting)
                self.particles.append({
                    "x": start_x + layer_width + 50,
                    "y": start_y + layer_height // 2,
                    "type": "packet",
                    "lifetime": 200,
                    "direction": "down",
                    "current_layer": 0,
                    "size": 20  # Starting size (gets smaller as it moves down)
                })
            else:
                # Start at physical layer (receiving)
                self.particles.append({
                    "x": start_x - 50,
                    "y": start_y + stack_height - layer_height // 2,
                    "type": "packet",
                    "lifetime": 200,
                    "direction": "up",
                    "current_layer": len(layers) - 1,
                    "size": 10  # Starting size (gets bigger as it moves up)
                })
        
        # Update and draw packets
        for particle in self.particles[:]:
            if particle["lifetime"] <= 0:
                self.particles.remove(particle)
                continue
                
            particle["lifetime"] -= 1
            
            if particle["direction"] == "down":
                # Moving down the stack
                if particle["current_layer"] < len(layers) - 1:
                    # Calculate target position at next layer
                    target_y = start_y + (particle["current_layer"] + 1) * layer_height + layer_height // 2
                    
                    # Move toward target
                    if particle["y"] < target_y - 5:
                        particle["y"] += 2
                    else:
                        # At layer transition, update and add encapsulation
                        particle["current_layer"] += 1
                        particle["size"] -= 2  # Packet gets smaller visually (headers added)
                        
                        # Add encapsulation visualization
                        if particle["current_layer"] < len(layers):
                            # Add header/footer particles
                            header_color = layers[particle["current_layer"]]["color"]
                            self.particles.append({
                                "x": particle["x"],
                                "y": particle["y"] - particle["size"] // 2 - 5,
                                "type": "header",
                                "lifetime": 30,
                                "color": header_color,
                                "width": particle["size"] + 10
                            })
                
                # If reached the bottom, start moving right
                if particle["current_layer"] == len(layers) - 1 and particle["x"] < self.width - 50:
                    particle["x"] += 3
            else:  # direction == "up"
                # Moving up the stack
                if particle["current_layer"] > 0:
                    # Calculate target position at next layer up
                    target_y = start_y + (particle["current_layer"] - 1) * layer_height + layer_height // 2
                    
                    # Move toward target
                    if particle["y"] > target_y + 5:
                        particle["y"] -= 2
                    else:
                        # At layer transition, update and remove encapsulation
                        particle["current_layer"] -= 1
                        particle["size"] += 2  # Packet gets bigger visually (headers removed)
                        
                        # Add decapsulation visualization
                        if particle["current_layer"] >= 0:
                            # Add header/footer particles being removed
                            header_color = layers[particle["current_layer"] + 1]["color"]
                            self.particles.append({
                                "x": particle["x"] + particle["size"] // 2 + 10,
                                "y": particle["y"],
                                "type": "header",
                                "lifetime": 30,
                                "color": header_color,
                                "width": particle["size"] - 5
                            })
                
                # If reached the top, start moving right
                if particle["current_layer"] == 0 and particle["x"] < self.width - 50:
                    particle["x"] += 3
            
            # Draw the packet
            if particle["type"] == "packet":
                # Main packet body
                packet_color = (255, 255, 255)
                pygame.draw.rect(self.surface, packet_color, 
                               (particle["x"] - particle["size"] // 2, 
                                particle["y"] - particle["size"] // 2,
                                particle["size"], particle["size"]))
                
                # Packet border
                border_color = layers[particle["current_layer"]]["color"]
                pygame.draw.rect(self.surface, border_color, 
                               (particle["x"] - particle["size"] // 2, 
                                particle["y"] - particle["size"] // 2,
                                particle["size"], particle["size"]), 2)
                
            elif particle["type"] == "header":
                # Header/footer visualization
                pygame.draw.rect(self.surface, particle["color"], 
                               (particle["x"] - particle["width"] // 2, 
                                particle["y"] - 3,
                                particle["width"], 6))
        
        # Draw data flow arrows
        arrow_x = start_x - 30
        pygame.draw.line(self.surface, self.colors["text"], 
                        (arrow_x, start_y + layer_height // 2), 
                        (arrow_x, start_y + stack_height - layer_height // 2), 2)
        # Up arrow
        pygame.draw.polygon(self.surface, self.colors["text"], 
                          [(arrow_x, start_y + layer_height // 2), 
                           (arrow_x - 5, start_y + layer_height // 2 + 10),
                           (arrow_x + 5, start_y + layer_height // 2 + 10)])
        # Label
        up_text = self.small_font.render("Receiving", True, self.colors["text"])
        self.surface.blit(up_text, (arrow_x - up_text.get_width() // 2, start_y - 25))
        
        arrow_x = start_x + layer_width + 30
        pygame.draw.line(self.surface, self.colors["text"], 
                        (arrow_x, start_y + layer_height // 2), 
                        (arrow_x, start_y + stack_height - layer_height // 2), 2)
        # Down arrow
        pygame.draw.polygon(self.surface, self.colors["text"], 
                          [(arrow_x, start_y + stack_height - layer_height // 2), 
                           (arrow_x - 5, start_y + stack_height - layer_height // 2 - 10),
                           (arrow_x + 5, start_y + stack_height - layer_height // 2 - 10)])
        # Label
        down_text = self.small_font.render("Sending", True, self.colors["text"])
        self.surface.blit(down_text, (arrow_x - down_text.get_width() // 2, start_y - 25))
        
        # Educational text
        info_text = [
            "Network Protocol Stack:",
            "- Data encapsulation when sending (down)",
            "- Data decapsulation when receiving (up)",
            "- Each layer adds its own headers/trailers",
            "- Provides abstraction between layers",
            "- Each layer has a specific role",
            "- Based on the OSI or TCP/IP model"
        ]
        
        # Draw text box
        text_box_x = 20
        text_box_y = self.height - 160
        text_box_width = 300
        text_box_height = 150
        
        pygame.draw.rect(self.surface, (50, 50, 70), 
                        (text_box_x, text_box_y, text_box_width, text_box_height))
        pygame.draw.rect(self.surface, self.colors["text"], 
                        (text_box_x, text_box_y, text_box_width, text_box_height), 2)
        
        for i, line in enumerate(info_text):
            text = self.small_font.render(line, True, self.colors["text"])
            self.surface.blit(text, (text_box_x + 10, text_box_y + 10 + i*20))
        
        return self.surface
        
    def render_storage_hierarchy(self):
        """Visualize storage systems and data organization"""
        self.surface.fill(self.colors["background"])
        
        # Title
        title = self.title_font.render("Storage Systems", True, self.colors["text"])
        self.surface.blit(title, (self.width//2 - title.get_width()//2, 20))
        
        # Draw storage devices
        devices = [
            {"name": "Hard Disk Drive (HDD)", "x": 100, "y": 80, 
             "width": 200, "height": 150, "color": (120, 120, 220)},
            {"name": "Solid State Drive (SSD)", "x": 400, "y": 80, 
             "width": 200, "height": 150, "color": (120, 220, 180)}
        ]
        
        for device in devices:
            # Device body
            pygame.draw.rect(self.surface, device["color"], 
                           (device["x"], device["y"], device["width"], device["height"]))
            pygame.draw.rect(self.surface, self.colors["text"], 
                           (device["x"], device["y"], device["width"], device["height"]), 2)
            
            # Device name
            name_text = self.text_font.render(device["name"], True, (0, 0, 0))
            self.surface.blit(name_text, 
                             (device["x"] + device["width"]//2 - name_text.get_width()//2, 
                              device["y"] + 10))
        
        # Draw HDD internals
        hdd = devices[0]
        # Platters
        for i in range(3):
            platter_y = hdd["y"] + 40 + i * 25
            pygame.draw.ellipse(self.surface, (200, 200, 220), 
                              (hdd["x"] + 20, platter_y, 160, 20))
            pygame.draw.ellipse(self.surface, (50, 50, 70), 
                              (hdd["x"] + 20, platter_y, 160, 20), 1)
        
        # Actuator arm
        arm_start_x = hdd["x"] + 170
        arm_start_y = hdd["y"] + 65
        arm_angle = (self.animation_ticks // 2) % 120
        if arm_angle > 60:
            arm_angle = 120 - arm_angle
        arm_angle = 30 + arm_angle  # 30-90 degrees
        
        arm_length = 130
        arm_end_x = arm_start_x - arm_length * math.cos(math.radians(arm_angle))
        arm_end_y = arm_start_y + arm_length * math.sin(math.radians(arm_angle))
        
        pygame.draw.line(self.surface, (50, 50, 50), 
                        (arm_start_x, arm_start_y), 
                        (arm_end_x, arm_end_y), 3)
        
        # Read/write head
        pygame.draw.circle(self.surface, (255, 200, 100), 
                          (int(arm_end_x), int(arm_end_y)), 5)
        
        # Spindle
        pygame.draw.line(self.surface, (50, 50, 50), 
                        (hdd["x"] + 100, hdd["y"] + 40), 
                        (hdd["x"] + 100, hdd["y"] + 120), 2)
        
        # Draw SSD internals
        ssd = devices[1]
        # NAND chips
        chip_width = 40
        chip_height = 30
        for row in range(3):
            for col in range(4):
                chip_x = ssd["x"] + 20 + col * (chip_width + 5)
                chip_y = ssd["y"] + 40 + row * (chip_height + 5)
                
                # Check if this chip is being accessed in the animation
                is_active = (row * 4 + col) == (self.animation_ticks // 15) % 12
                
                chip_color = (255, 240, 100) if is_active else (180, 180, 180)
                
                pygame.draw.rect(self.surface, chip_color, 
                               (chip_x, chip_y, chip_width, chip_height))
                pygame.draw.rect(self.surface, (50, 50, 50), 
                               (chip_x, chip_y, chip_width, chip_height), 1)
                
                # Chip pins
                for i in range(5):
                    pin_x = chip_x + 5 + i * 7
                    pygame.draw.line(self.surface, (100, 100, 100), 
                                    (pin_x, chip_y + chip_height), 
                                    (pin_x, chip_y + chip_height + 3), 1)
        
        # Controller chip
        controller_x = ssd["x"] + 70
        controller_y = ssd["y"] + 120
        pygame.draw.rect(self.surface, (100, 100, 100), 
                       (controller_x, controller_y, 60, 20))
        controller_text = self.small_font.render("Controller", True, (200, 200, 200))
        self.surface.blit(controller_text, 
                         (controller_x + 30 - controller_text.get_width()//2, 
                          controller_y + 10 - controller_text.get_height()//2))
        
        # Data organization diagram
        org_x = 50
        org_y = 250
        org_width = self.width - 100
        org_height = 180
        
        pygame.draw.rect(self.surface, (40, 40, 60), 
                       (org_x, org_y, org_width, org_height))
        pygame.draw.rect(self.surface, self.colors["text"], 
                       (org_x, org_y, org_width, org_height), 2)
        
        # Title
        org_title = self.text_font.render("Data Organization", True, self.colors["text"])
        self.surface.blit(org_title, 
                         (org_x + org_width//2 - org_title.get_width()//2, 
                          org_y + 10))
        
        # File system layers
        fs_layers = [
            {"name": "Files", "color": (220, 150, 150)},
            {"name": "File System", "color": (150, 220, 150)},
            {"name": "Logical Blocks", "color": (150, 150, 220)},
            {"name": "Physical Storage", "color": (220, 220, 150)}
        ]
        
        layer_width = 120
        layer_spacing = (org_width - len(fs_layers) * layer_width) // (len(fs_layers) + 1)
        
        for i, layer in enumerate(fs_layers):
            layer_x = org_x + layer_spacing + i * (layer_width + layer_spacing)
            layer_y = org_y + 40
            
            # Draw layer
            pygame.draw.rect(self.surface, layer["color"], 
                           (layer_x, layer_y, layer_width, 100))
            pygame.draw.rect(self.surface, self.colors["text"], 
                           (layer_x, layer_y, layer_width, 100), 1)
            
            # Layer name
            name_text = self.small_font.render(layer["name"], True, (0, 0, 0))
            self.surface.blit(name_text, 
                             (layer_x + layer_width//2 - name_text.get_width()//2, 
                              layer_y + 10))
            
            # Layer details based on type
            if layer["name"] == "Files":
                # Document icons
                for j in range(3):
                    doc_y = layer_y + 35 + j * 20
                    pygame.draw.rect(self.surface, (240, 240, 240), 
                                   (layer_x + 30, doc_y, 15, 20))
                    pygame.draw.polygon(self.surface, (240, 240, 240), 
                                      [(layer_x + 45, doc_y), 
                                       (layer_x + 45, doc_y + 5),
                                       (layer_x + 50, doc_y + 5),
                                       (layer_x + 50, doc_y + 20),
                                       (layer_x + 45, doc_y + 20)])
                    pygame.draw.polygon(self.surface, (100, 100, 100), 
                                      [(layer_x + 45, doc_y), 
                                       (layer_x + 45, doc_y + 5),
                                       (layer_x + 50, doc_y + 5)], 1)
                    pygame.draw.rect(self.surface, (100, 100, 100), 
                                   (layer_x + 30, doc_y, 20, 20), 1)
                    
            elif layer["name"] == "File System":
                # Directory tree
                pygame.draw.line(self.surface, (50, 50, 50), 
                               (layer_x + 60, layer_y + 35), 
                               (layer_x + 60, layer_y + 80), 2)
                
                for j in range(3):
                    branch_y = layer_y + 45 + j * 15
                    pygame.draw.line(self.surface, (50, 50, 50), 
                                   (layer_x + 60, branch_y), 
                                   (layer_x + 80, branch_y), 2)
                    
                    # Small folder icons
                    folder_color = (220, 180, 100)
                    pygame.draw.rect(self.surface, folder_color, 
                                   (layer_x + 80, branch_y - 5, 15, 10))
                
            elif layer["name"] == "Logical Blocks":
                # Block representation
                for j in range(4):
                    for k in range(2):
                        block_x = layer_x + 30 + k * 30
                        block_y = layer_y + 35 + j * 15
                        
                        block_color = (180, 180, 200)
                        if (j*2 + k) == (self.animation_ticks // 10) % 8:
                            block_color = (255, 200, 100)
                            
                        pygame.draw.rect(self.surface, block_color, 
                                       (block_x, block_y, 25, 10))
                        pygame.draw.rect(self.surface, (50, 50, 70), 
                                       (block_x, block_y, 25, 10), 1)
                
            elif layer["name"] == "Physical Storage":
                # Different for HDD vs SSD
                # HDD-like
                pygame.draw.circle(self.surface, (200, 200, 220), 
                                 (layer_x + 40, layer_y + 60), 25)
                pygame.draw.circle(self.surface, (50, 50, 70), 
                                 (layer_x + 40, layer_y + 60), 25, 1)
                
                # Sectors
                for angle in range(0, 360, 45):
                    end_x = layer_x + 40 + 25 * math.cos(math.radians(angle))
                    end_y = layer_y + 60 + 25 * math.sin(math.radians(angle))
                    pygame.draw.line(self.surface, (50, 50, 70), 
                                   (layer_x + 40, layer_y + 60), 
                                   (end_x, end_y), 1)
                
                # SSD-like
                pygame.draw.rect(self.surface, (180, 220, 200), 
                               (layer_x + 70, layer_y + 40, 30, 40))
                pygame.draw.rect(self.surface, (50, 50, 70), 
                               (layer_x + 70, layer_y + 40, 30, 40), 1)
                
                # Memory cells
                for j in range(4):
                    cell_y = layer_y + 45 + j * 8
                    pygame.draw.line(self.surface, (50, 50, 70), 
                                   (layer_x + 70, cell_y), 
                                   (layer_x + 100, cell_y), 1)
        
        # Draw arrows between layers
        for i in range(len(fs_layers) - 1):
            start_x = org_x + layer_spacing + i * (layer_width + layer_spacing) + layer_width
            end_x = start_x + layer_spacing
            mid_y = org_y + 90
            
            # Arrow line
            pygame.draw.line(self.surface, self.colors["text"], 
                           (start_x, mid_y), (end_x, mid_y), 2)
            
            # Arrow head
            pygame.draw.polygon(self.surface, self.colors["text"], 
                              [(end_x, mid_y), 
                               (end_x - 8, mid_y - 4),
                               (end_x - 8, mid_y + 4)])
        
        # Educational text
        info_text = [
            "Storage Systems:",
            "- HDD: Mechanical, uses magnetic platters",
            "- SSD: Solid-state, uses flash memory cells",
            "- Data is organized hierarchically",
            "- File systems manage the mapping",
            "- Trade-offs: Speed vs. Capacity vs. Cost"
        ]
        
        for i, line in enumerate(info_text):
            text = self.small_font.render(line, True, self.colors["text"])
            self.surface.blit(text, (org_x + 10, org_y + org_height + 10 + i*20))
        
        return self.surface

# Add the component visualizer to the Game class:
# self.visualizer = ComponentVisualizer()
# 
# Then add commands to show visualizations:
# elif command == 'visualize' or command == 'viz':
#     if len(cmd_list) > 1:
#         viz_type = cmd_list[1].lower()
#         if viz_type in ['cpu', 'processor']:
#             self.current_visualization = 'cpu'
#             return "Displaying CPU visualization. Type 'viz stop' to return to text mode."
#         elif viz_type in ['memory', 'ram', 'cache']:
#             self.current_visualization = 'memory'
#             return "Displaying memory hierarchy visualization. Type 'viz stop' to return to text mode."
#         elif viz_type in ['network', 'protocol']:
#             self.current_visualization = 'network'
#             return "Displaying network protocol stack visualization. Type 'viz stop' to return to text mode."
#         elif viz_type in ['storage', 'disk', 'drive']:
#             self.current_visualization = 'storage'
#             return "Displaying storage systems visualization. Type 'viz stop' to return to text mode."
#         elif viz_type == 'stop':
#             self.current_visualization = None
#             return "Visualization stopped. Returning to text mode."
#         else:
#             return f"Unknown visualization type: {viz_type}. Try 'cpu', 'memory', 'network', or 'storage'."
#     else:
#         return "Please specify what to visualize: 'viz cpu', 'viz memory', 'viz network', or 'viz storage'."