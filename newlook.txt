def format_look_output(location, connections, items, technical_details=None):
    """Format the look command output for better readability."""
    output = []
    
    # Location header
    output.append("┏" + "━" * 20 + " LOCATION " + "━" * 20 + "┓")
    output.append(f"  {location.name}")
    output.append("┗" + "━" * 51 + "┛\n")
    
    # Description
    output.append("Description:")
    description_lines = textwrap.wrap(location.desc, width=70)
    output.extend([f"  {line}" for line in description_lines])
    output.append("")
    
    # Connections
    output.append("┏" + "━" * 18 + " AVAILABLE CONNECTIONS " + "━" * 18 + "┓")
    
    # Format regular connections
    reg_connections = []
    for direction, connected_room in connections.items():
        dir_name = DIRECTION_NAMES.get(direction, direction).upper()
        if len(dir_name) == 1:
            reg_connections.append(f"[{dir_name}]orth: {connected_room.name}")
        elif len(dir_name) == 2:
            reg_connections.append(f"[{dir_name}]: {connected_room.name}")
        else:
            reg_connections.append(f"[{dir_name[0]}]{dir_name[1:]}: {connected_room.name}")
    
    # Split into lines of 2-3 connections each
    conn_lines = []
    for i in range(0, len(reg_connections), 3):
        conn_lines.append("  " + "  ".join(reg_connections[i:i+3]))
    
    output.extend(conn_lines)
    output.append("┗" + "━" * 60 + "┛\n")
    
    # Components
    if items:
        output.append("┏" + "━" * 20 + " COMPONENTS " + "━" * 20 + "┓")
        for item in items:
            output.append(f"  • {item}")
        output.append("┗" + "━" * 51 + "┛")
        output.append("\nType 'examine [component]' or 'take [component]' to interact.\n")
    
    # Technical details if visited
    if technical_details:
        output.append("┏" + "━" * 19 + " TECHNICAL DETAILS " + "━" * 19 + "┓")
        for line in technical_details:
            output.append(f"  {line}")
        output.append("┗" + "━" * 51 + "┛")
    
    return "\n".join(output)