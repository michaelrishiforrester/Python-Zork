# Project Structure Refactoring

"""
Proposed directory structure for ComputerQuest:

computerquest/
├── main.py                   # Entry point
├── config.py                 # Game configuration
├── README.md                 # Documentation
├── requirements.txt          # Dependencies
├── assets/                   # For GUI assets if added
├── data/                     # Game data files
│   ├── achievements.json     # Achievement definitions
│   ├── components.json       # Computer component definitions
│   ├── items.json            # Item definitions
│   └── viruses.json          # Virus definitions
└── computerquest/            # Main package
    ├── __init__.py
    ├── game.py               # Game controller
    ├── commands.py           # Command processor with Command pattern
    ├── models/               # Data models
    │   ├── __init__.py
    │   ├── player.py         # Player class
    │   ├── component.py      # Computer component (room) class
    │   ├── item.py           # Item class
    │   └── virus.py          # Virus class 
    ├── world/                # World generation
    │   ├── __init__.py
    │   ├── architecture.py   # Computer architecture generator
    │   ├── loader.py         # Load components/items from data files
    │   └── connector.py      # Connect components together
    ├── ui/                   # User interfaces
    │   ├── __init__.py
    │   ├── text_interface.py # Text-based interface
    │   └── gui_interface.py  # Optional GUI interface
    ├── mechanics/            # Game mechanics
    │   ├── __init__.py
    │   ├── scanner.py        # Virus scanning mechanics
    │   ├── knowledge.py      # Knowledge and learning system
    │   ├── achievements.py   # Achievements and progress tracking
    │   └── minigames/        # Educational minigames
    │       ├── __init__.py
    │       ├── pipeline.py   # CPU pipeline simulation
    │       └── memory.py     # Memory hierarchy simulation
    └── utils/                # Utility functions
        ├── __init__.py
        ├── logger.py         # Logging system
        └── helpers.py        # General helper functions
"""

# Example implementation of Command pattern for processing user commands

# commands.py
class Command:
    """Base class for all commands"""
    def __init__(self, game, args=None):
        self.game = game
        self.args = args or []
        
    def execute(self):
        """Execute the command - to be implemented by subclasses"""
        raise NotImplementedError("Subclasses must implement execute()")
        
    def can_execute(self):
        """Check if command can be executed - optional validation"""
        return True

class MoveCommand(Command):
    """Command to move player between components"""
    def can_execute(self):
        if not self.args:
            return False, "Please specify a direction."
        return True, None
        
    def execute(self):
        direction = self.args[0].lower()
        return self.game.move(direction)

class LookCommand(Command):
    """Command to look around or examine an item"""
    def execute(self):
        if not self.args:
            return self.game.player.look()
        else:
            item_name = self.args[0].lower()
            return self.game.player.look(item_name)

class TakeCommand(Command):
    """Command to take an item"""
    def can_execute(self):
        if not self.args:
            return False, "What do you want to take?"
        return True, None
        
    def execute(self):
        item_name = self.args[0].lower()
        self.game.player.take(item_name)
        return f"You took the {item_name}."

class DropCommand(Command):
    """Command to drop an item"""
    def can_execute(self):
        if not self.args:
            return False, "What do you want to drop?"
        if self.args[0].lower() not in self.game.player.items:
            return False, f"You don't have a {self.args[0]}."
        return True, None
        
    def execute(self):
        item_name = self.args[0].lower()
        self.game.player.drop(item_name)
        return f"You dropped the {item_name}."

class InventoryCommand(Command):
    """Command to show player's inventory"""
    def execute(self):
        if not self.game.player.items:
            return "Your system storage is empty."
        
        result = "System Storage Contains:\n"
        for item, desc in self.game.player.items.items():
            # Show abbreviated description for inventory listing
            short_desc = desc.split('.')[0] if '.' in desc else desc
            if len(short_desc) > 50:
                short_desc = short_desc[:47] + "..."
            result += f"- {item}: {short_desc}\n"
        return result

class ScanCommand(Command):
    """Command to scan for viruses"""
    def execute(self):
        if not self.args:
            return self.game.player.scan()
        else:
            target = self.args[0].lower()
            return self.game.player.scan(target)

class QuarantineCommand(Command):
    """Command to quarantine a virus"""
    def can_execute(self):
        if not self.args:
            return False, "Which virus do you want to quarantine?"
        return True, None
        
    def execute(self):
        virus_name = self.args[0].lower()
        result = self.game.player.quarantine(virus_name)
        
        # Check for victory condition
        if len(self.game.player.quarantined_viruses) == len(self.game.viruses):
            self.game.victory = True
            result += "\n\n" + self.game.victory_message()
            self.game.game_over = True
            
        return result

class HelpCommand(Command):
    """Command to show help message"""
    def execute(self):
        return self.game.show_help()

class QuitCommand(Command):
    """Command to quit the game"""
    def execute(self):
        confirm = input("Are you sure you want to exit? Progress will be lost. (y/n): ").lower()
        if confirm in ['y', 'yes']:
            self.game.game_over = True
            return "Exiting ComputerQuest. Goodbye!"
        else:
            return "Continuing mission..."

class AboutCommand(Command):
    """Command to get information about computer components"""
    def can_execute(self):
        if not self.args:
            return False, "What topic would you like information about? Try 'about cpu', 'about memory', etc."
        return True, None
        
    def execute(self):
        topic = self.args[0].lower()
        return self.game.get_component_info(topic)

class StatusCommand(Command):
    """Command to check progress"""
    def execute(self):
        return self.game.player.check_progress()

class KnowledgeCommand(Command):
    """Command to check knowledge levels"""
    def execute(self):
        return self.game.player.knowledge_report()

class ProgressCommand(Command):
    """Command to check overall progress"""
    def execute(self):
        return self.game.progress.get_progress_report()

class CommandProcessor:
    """Processes user commands using Command pattern"""
    def __init__(self, game):
        self.game = game
        self.commands = {
            'go': MoveCommand,
            'move': MoveCommand,
            'north': self._direction_command('north'),
            'n': self._direction_command('north'),
            'south': self._direction_command('south'),
            's': self._direction_command('south'),
            'east': self._direction_command('east'),
            'e': self._direction_command('east'),
            'west': self._direction_command('west'),
            'w': self._direction_command('west'),
            'northeast': self._direction_command('northeast'),
            'ne': self._direction_command('northeast'),
            'northwest': self._direction_command('northwest'),
            'nw': self._direction_command('northwest'),
            'southeast': self._direction_command('southeast'),
            'se': self._direction_command('southeast'),
            'southwest': self._direction_command('southwest'),
            'sw': self._direction_command('southwest'),
            'up': self._direction_command('up'),
            'u': self._direction_command('up'),
            'down': self._direction_command('down'),
            'd': self._direction_command('down'),
            'look': LookCommand,
            'examine': LookCommand,
            'take': TakeCommand,
            'get': TakeCommand,
            'drop': DropCommand,
            'inventory': InventoryCommand,
            'i': InventoryCommand,
            'scan': ScanCommand,
            'quarantine': QuarantineCommand,
            'help': HelpCommand,
            'quit': QuitCommand,
            'exit': QuitCommand,
            'about': AboutCommand,
            'status': StatusCommand,
            'progress': ProgressCommand,
            'knowledge': KnowledgeCommand,
        }
    
    def _direction_command(self, direction):
        """Create a move command with direction already specified"""
        def command_factory(game, args=None):
            return MoveCommand(game, [direction])
        return command_factory
    
    def process(self, user_input):
        """Process a user command"""
        # Skip empty inputs
        if not user_input.strip():
            return "Please enter a command. Type 'help' for available commands."
            
        # Split into command words
        cmd_words = user_input.lower().split()
        command = cmd_words[0]
        args = cmd_words[1:]
        
        # Update turn counter
        self.game.turns += 1
        
        # Check if command exists
        if command in self.commands:
            cmd_class = self.commands[command]
            cmd = cmd_class(self.game, args)
            
            # Validate command
            can_execute, error = cmd.can_execute() if hasattr(cmd, 'can_execute') else (True, None)
            if not can_execute:
                return error
                
            # Execute command
            result = cmd.execute()
            
            # Check for new achievements
            newly_unlocked = self.game.progress.update()
            if newly_unlocked:
                result += "\n\nACHIEVEMENT UNLOCKED!\n"
                for achievement in newly_unlocked:
                    result += f"- {achievement.name}: {achievement.description}\n"
                    
            return result
        else:
            return f"Command '{command}' not recognized. Type 'help' for available commands."