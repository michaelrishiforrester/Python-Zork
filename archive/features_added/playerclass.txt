def advanced_scan(self, target=None):
    """
    Advanced scanning that can reveal hidden viruses and their properties
    Requires higher knowledge levels in respective areas
    """
    # Check if player has advanced scanning capability
    required_tools = {
        'antivirus_tool': "You need an antivirus tool to perform a scan.",
        'decoder_tool': "A more advanced decoder tool would help analyze code patterns."
    }
    
    missing_tools = [tool for tool, msg in required_tools.items() if tool not in self.items]
    if missing_tools:
        return required_tools[missing_tools[0]]
    
    # Knowledge requirements for different component types
    required_knowledge = {
        'cpu': {'cpu': 2, 'security': 1},
        'memory': {'memory': 2, 'security': 1},
        'storage': {'storage': 2, 'security': 1},
        'network': {'networking': 2, 'security': 1},
        'firmware': {'security': 3}
    }
    
    # Determine component type
    component_type = 'other'
    loc_name = self.location.name.lower()
    if any(x in loc_name for x in ['cpu', 'alu', 'control', 'register']):
        component_type = 'cpu'
    elif any(x in loc_name for x in ['memory', 'ram', 'cache']):
        component_type = 'memory'
    elif any(x in loc_name for x in ['ssd', 'hdd', 'drive', 'disk', 'storage']):
        component_type = 'storage'
    elif any(x in loc_name for x in ['network', 'interface']):
        component_type = 'network'
    elif any(x in loc_name for x in ['bios', 'firmware', 'uefi']):
        component_type = 'firmware'
    
    # Check knowledge requirements
    if component_type in required_knowledge:
        for knowledge_area, level in required_knowledge[component_type].items():
            if self.knowledge[knowledge_area] < level:
                return f"You need more knowledge of {knowledge_area} (level {level}) to perform an advanced scan in this component."
    
    # Scanning logic similar to regular scan but with enhanced capabilities
    if target:
        # Scanning a specific item with enhanced capabilities
        if target in self.location.items:
            item_desc = self.location.items[target]
            
            # Detect both obvious and hidden viruses
            if 'virus' in target.lower() or 'malicious' in item_desc.lower() or 'suspicious' in item_desc.lower():
                virus_type = None
                if 'boot' in target.lower() or 'boot' in item_desc.lower():
                    virus_type = "boot_sector_virus"
                elif 'root' in target.lower() or 'kernel' in item_desc.lower():
                    virus_type = "rootkit_virus"
                elif 'memory' in target.lower() or 'ram' in item_desc.lower():
                    virus_type = "memory_resident_virus"
                elif 'firm' in target.lower() or 'bios' in item_desc.lower():
                    virus_type = "firmware_virus"
                elif 'packet' in target.lower() or 'network' in item_desc.lower():
                    virus_type = "packet_sniffer_virus"
                
                if virus_type and virus_type not in self.found_viruses:
                    self.found_viruses.append(virus_type)
                    self.knowledge['security'] += 2
                
                return f"ADVANCED SCAN RESULTS:\n\nThreat detected in {target}!\n" + \
                       f"Virus Type: {virus_type if virus_type else 'Unknown'}\n" + \
                       f"Threat Level: High\n" + \
                       f"Analysis: {item_desc}\n\n" + \
                       f"Recommended action: Quarantine immediately."
            else:
                return f"Advanced scan complete. No threats detected in {target}."
                
        # Item not in location, check inventory
        elif target in self.items:
            # Similar logic as above for inventory items
            # [Code would be similar to the above with minor modifications]
            pass
        else:
            return f"There's no {target} here to scan."
    
    # Scanning the entire room with enhanced capabilities
    else:
        # Regular virus checks
        viruses_here = [item for item in self.location.items if 'virus' in item.lower()]
        
        # Hidden virus checks based on item descriptions
        hidden_threats = []
        for item, desc in self.location.items.items():
            if 'virus' not in item.lower() and ('suspicious' in desc.lower() or 'malicious' in desc.lower()):
                hidden_threats.append(item)
        
        if viruses_here or hidden_threats:
            result = "ADVANCED SECURITY SCAN RESULTS:\n\n"
            
            if viruses_here:
                result += "Confirmed threats:\n"
                for virus in viruses_here:
                    if virus not in self.found_viruses:
                        self.found_viruses.append(virus)
                        self.knowledge['security'] += 1
                    result += f"- {virus}\n"
                    
            if hidden_threats:
                result += "\nSuspicious items requiring further analysis:\n"
                for item in hidden_threats:
                    result += f"- {item}\n"
                
            result += "\nUse 'analyze [item]' for detailed threat assessment and 'quarantine [virus]' to contain threats."
            return result
        else:
            # Increase knowledge based on the current component
            self._increase_component_knowledge()
            
            return f"Advanced scan complete. No threats detected in {self.location.name}."

def analyze(self, target):
    """
    Deeply analyze an item to reveal hidden properties or connections to viruses
    """
    if 'decoder_tool' not in self.items:
        return "You need a decoder tool to perform detailed analysis."
        
    # Check if item exists
    if target in self.location.items:
        item_desc = self.location.items[target]
        
        # Analysis results based on item type
        if 'log' in target:
            return f"Analysis of {target}:\n\n" + \
                  f"The log contains entries showing {item_desc}\n" + \
                  f"Pattern analysis reveals evidence of {'suspicious' if 'suspicious' in item_desc or 'unusual' in item_desc else 'normal'} activity."
        
        elif 'calculation' in target or 'anomaly' in target:
            return f"Analysis of {target}:\n\n" + \
                  f"The data patterns show {item_desc}\n" + \
                  f"This could be a sign of a {'virus attempting to hide its operations' if 'suspicious' in item_desc or 'unusual' in item_desc else 'normal system process'}."
                  
        elif 'packet' in target:
            return f"Analysis of {target}:\n\n" + \
                  f"The packet contains {item_desc}\n" + \
                  f"Traffic analysis indicates this may be {'data exfiltration' if 'suspicious' in item_desc or 'unusual' in item_desc else 'normal network traffic'}."
        
        else:
            # Generic analysis for other items
            suspicious_terms = ['suspicious', 'unusual', 'strange', 'abnormal', 'unexpected']
            is_suspicious = any(term in item_desc.lower() for term in suspicious_terms)
            
            if is_suspicious:
                virus_hint = ""
                if 'boot' in item_desc.lower():
                    virus_hint = "This may be related to a boot sector infection."
                elif 'kernel' in item_desc.lower() or 'root' in item_desc.lower():
                    virus_hint = "This could indicate rootkit activity in the system."
                elif 'memory' in item_desc.lower():
                    virus_hint = "This pattern is consistent with memory-resident malware."
                elif 'firmware' in item_desc.lower() or 'bios' in item_desc.lower():
                    virus_hint = "This suggests possible firmware compromising."
                elif 'network' in item_desc.lower() or 'packet' in item_desc.lower():
                    virus_hint = "This is characteristic of network traffic interception."
                
                return f"Analysis of {target}:\n\n" + \
                      f"SECURITY ALERT: This item shows signs of suspicious activity.\n" + \
                      f"Details: {item_desc}\n" + \
                      f"{virus_hint}"
            else:
                return f"Analysis of {target}:\n\n" + \
                      f"No suspicious patterns detected. This appears to be a normal {target}.\n" + \
                      f"Description: {item_desc}"
    
    # Check in inventory
    elif target in self.items:
        # Similar logic as above
        pass
    else:
        return f"There's no {target} here to analyze."

def _increase_component_knowledge(self):
    """Helper method to increase knowledge based on current location"""
    if 'cpu' in self.location.name.lower() or 'alu' in self.location.name.lower() or 'register' in self.location.name.lower():
        self.knowledge['cpu'] = min(5, self.knowledge['cpu'] + 1)
    elif 'memory' in self.location.name.lower() or 'ram' in self.location.name.lower() or 'cache' in self.location.name.lower():
        self.knowledge['memory'] = min(5, self.knowledge['memory'] + 1)
    elif 'drive' in self.location.name.lower() or 'disk' in self.location.name.lower() or 'ssd' in self.location.name.lower() or 'hdd' in self.location.name.lower():
        self.knowledge['storage'] = min(5, self.knowledge['storage'] + 1)
    elif 'network' in self.location.name.lower() or 'interface' in self.location.name.lower():
        self.knowledge['networking'] = min(5, self.knowledge['networking'] + 1)